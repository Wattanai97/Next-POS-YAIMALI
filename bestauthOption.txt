import NextAuth, { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import bcrypt from "bcrypt";
import User from "@/models/user";
import { connectDB } from "@/lib/db";
import GoogleProvider from "next-auth/providers/google";

// üü¢ Custom User Type
interface CustomUser {
  id: string;
  username: string;
  role: string;
}

// üü¢ ‡∏Ç‡∏¢‡∏≤‡∏¢ Type ‡∏Ç‡∏≠‡∏á NextAuth
declare module "next-auth" {
  interface User extends CustomUser {}

  interface Session {
    user: {
      id: string;
      username: string;
      role: string;
    };
  }

  interface JWT {
    id: string;
    username: string;
    role: string;
  }
}

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.username || !credentials?.password) {
          throw new Error("‚ö†Ô∏è Username and password are required");
        }

        await connectDB();
        const user = await User.findOne({
          username: credentials.username,
        }).lean();

        if (!user) {
          throw new Error("‚ùå Invalid username or password");
        }

        const isMatch = await bcrypt.compare(
          credentials.password,
          user.password
        );
        if (!isMatch) {
          throw new Error("‚ùå Invalid username or password");
        }

        return {
          id: user._id.toString(),
          username: user.username,
          role: user.role,
        } as CustomUser;
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token = { ...token, ...user }; // üü¢ ‡πÉ‡∏ä‡πâ spread operator ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏¢‡∏Å
      }
      console.log("üîπ JWT Token:", token);
      return token;
    },
    async session({ session, token }) {
      session.user = {
        id: String(token.id), // üü¢ ‡πÉ‡∏ä‡πâ String() ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Type
        username: String(token.username), // üü¢ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined
        role: String(token.role), // üü¢ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined
      };
      return session;
    },
  },
  pages: {
    signIn: "/auth/login",
  },
  secret: process.env.NEXTAUTH_SECRET,
  session: {
    strategy: "jwt",
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
